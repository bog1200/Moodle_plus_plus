generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum AssignmentType {
  HOMEWORK
  EXAM
  PROJECT
  QUIZ
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// Models
model Person {
  id         Int          @id @default(autoincrement())
  account    Account?
  accountId  Int?         @unique
  firstName  String
  lastName   String
  email      String
  phone      String
  address    String
  gender     String
  dob        DateTime
  IdDocument IdDocument[]
  File       File[]
  Teacher    Teacher[]
  Student    Student[]
}

model IdDocumentType {
  id         Int          @id @default(autoincrement())
  name       String
  IdDocument IdDocument[]
}

model IdDocument {
  id               String  @id @default(cuid())
  documentNumber   String
  issueDate        DateTime
  expiryDate       DateTime
  person           Person         @relation(fields: [personId], references: [id])
  personId         Int
  idDocumentType   IdDocumentType @relation(fields: [idDocumentTypeId], references: [id])
  idDocumentTypeId Int
}

model Grade {
  id           String  @id @default(cuid())
  gradeValue   String
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model File {
  id          Int    @id @default(autoincrement())
  fileName    String
  fileType    String
  fileContent Bytes
  person      Person @relation(fields: [personId], references: [id])
  personId    Int
}

model CourseAttendance {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  date      DateTime
  present   Boolean
}

model Course {
  id          String             @id @default(cuid())
  name        String
  description String
  teacher     Teacher            @relation(fields: [teacherId], references: [id])
  teacherId   String
  attendances CourseAttendance[]
}

model AssignmentSubmission {
  id             String     @id @default(cuid())
  submissionDate DateTime
  student        Student    @relation(fields: [studentId], references: [id])
  studentId      String
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId   String
}

model Assignment {
  id             String                 @id @default(cuid())
  title          String
  description    String
  dueDate        DateTime
  assignmentType AssignmentType
  submissions    AssignmentSubmission[]
  Grade          Grade[]
}

model Account {
  id                       String  @id @default(cuid())
  person                   Person? @relation(fields: [personId], references: [id])
  personId                 Int?    @unique
  roles                    Role
  // Authjs
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
}

model Teacher {
  id       String  @id @default(cuid())
  person   Person    @relation(fields: [personId], references: [id])
  personId Int
  courses  Course[]
  Subject  Subject[]
}

model SubjectEnrollment {
  id        String  @id @default(cuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
}

model Subject {
  id          Int                 @id @default(autoincrement())
  name        String
  teacher     Teacher             @relation(fields: [teacherId], references: [id])
  teacherId   Int
  enrollments SubjectEnrollment[]
}

model StudentGroup {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
}

model Student {
  id               String                 @id @default(cuid())
  person           Person                 @relation(fields: [personId], references: [id])
  personId         Int
  group            StudentGroup?          @relation(fields: [groupId], references: [id])
  groupId          Int?
  enrollments      SubjectEnrollment[]
  grades           Grade[]
  submissions      AssignmentSubmission[]
  CourseAttendance CourseAttendance[]
}

// Authjs

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}
